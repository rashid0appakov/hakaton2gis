import requests
import json
import time
from datetime import datetime


class CianNorthWestRentParser:
    def __init__(self):
        self.session = requests.Session()
        self.set_headers()
        self.results = []

    def set_headers(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Content-Type': 'application/json',
            'Origin': 'https://www.cian.ru',
            'Referer': 'https://www.cian.ru/',
        }
        self.session.headers.update(self.headers)

    def search_offers(self, page=1):
        """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ API"""
        url = "https://api.cian.ru/search-offers/v2/search-offers-desktop/"

        payload = {
            "jsonQuery": {
                "_type": "flatrent",
                "engine_version": {"type": "term", "value": 2},
                "region": {"type": "terms", "value": [1]},  # –ú–æ—Å–∫–≤–∞
                "district": {"type": "terms", "value": [1]},  # –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –æ–∫—Ä—É–≥
                "room": {"type": "terms", "value": [1, 2, 3, 4, 5, 6, 0]},  # –í—Å–µ —Ç–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä –≤–∫–ª—é—á–∞—è —Å—Ç—É–¥–∏–∏
                "page": {"type": "term", "value": page}
            }
        }

        try:
            response = self.session.post(url, json=payload, timeout=15)
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
        return None

    def parse_offer(self, offer):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            result = {}

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            result['id'] = offer.get('id')
            result['title'] = offer.get('title', '')
            result['url'] = f"https://www.cian.ru/rent/flat/{offer.get('id')}/"

            # –¶–µ–Ω–∞
            price_data = offer.get('price', {})
            if price_data:
                result['price'] = price_data.get('total', {}).get('value')
            if not result.get('price'):
                result['price'] = offer.get('bargainTerms', {}).get('priceRur')

            # –ü–ª–æ—â–∞–¥—å
            area = offer.get('totalArea')
            if area:
                if isinstance(area, str):
                    import re
                    match = re.search(r'(\d+\.?\d*)', area)
                    if match:
                        result['area'] = float(match.group(1))
                else:
                    result['area'] = area

            # –ö–æ–º–Ω–∞—Ç—ã
            result['rooms'] = offer.get('roomsCount')
            if result['rooms'] == 0:
                result['room_type'] = '—Å—Ç—É–¥–∏—è'
            else:
                result['room_type'] = f'{result["rooms"]}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è'

            # –≠—Ç–∞–∂–∏
            result['floor'] = offer.get('floorNumber')
            result['total_floors'] = offer.get('building', {}).get('floorsCount')

            # –ê–¥—Ä–µ—Å –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
            geo = offer.get('geo', {})
            result['address'] = geo.get('userInput', '')
            result['latitude'] = geo.get('coordinates', {}).get('lat')
            result['longitude'] = geo.get('coordinates', {}).get('lng')

            # –ú–µ—Ç—Ä–æ
            undergrounds = geo.get('undergrounds', [])
            if undergrounds:
                metro = undergrounds[0]
                result['metro'] = metro.get('name')
                result['metro_time'] = metro.get('time')
                result['metro_line'] = metro.get('lineName')
                result['metro_color'] = metro.get('hexColor')

            # –î–æ–º
            building = offer.get('building', {})
            result['building_type'] = building.get('buildingType')
            result['build_year'] = building.get('buildYear')

            # –£—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã
            bargain = offer.get('bargainTerms', {})
            result['deposit'] = bargain.get('deposit')
            result['agent_fee'] = bargain.get('clientFee')
            result['commission'] = bargain.get('commission')

            # –ö–æ–Ω—Ç–∞–∫—Ç—ã
            result['is_by_homeowner'] = offer.get('isByHomeowner', False)
            result['agency_name'] = offer.get('agency', {}).get('name')

            # –û–ø–∏—Å–∞–Ω–∏–µ
            result['description'] = offer.get('description', '')[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

            # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            result['creation_date'] = offer.get('creationDate')

            # –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            result['parsed_at'] = datetime.now().isoformat()

            return result

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {offer.get('id')}: {e}")
            return None

    def extract_offers(self, data):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        if not data:
            return []

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –≤ JSON
        paths = [
            ['data', 'offersSerialized'],
            ['offers'],
            ['data', 'offers'],
        ]

        for path in paths:
            try:
                current = data
                for key in path:
                    current = current[key]
                if isinstance(current, list):
                    return current
            except:
                continue
        return []

    def collect_all_offers(self):
        """–°–±–æ—Ä –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")

        page = 1
        total_offers = 0

        while True:
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}...")

            data = self.search_offers(page)
            if not data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                break

            offers = self.extract_offers(data)
            if not offers:
                print("üì≠ –û–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                break

            # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_offers = []
            for offer in offers:
                parsed = self.parse_offer(offer)
                if parsed:
                    page_offers.append(parsed)

            self.results.extend(page_offers)
            total_offers += len(page_offers)

            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(page_offers)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if len(offers) < 28:  # –û–±—ã—á–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 28 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                print("üéØ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")
                break

            page += 1
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 50:
                print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü")
                break

        print(f"üéâ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_offers} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

    def save_to_json(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª"""
        if not self.results:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None

        filename = f'cian_north_west_rent_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π)
        sorted_results = sorted(self.results, key=lambda x: x.get('price', 0), reverse=True)

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(sorted_results, f, ensure_ascii=False, indent=2)

        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        return filename

    def show_summary(self):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not self.results:
            return

        print(f"\nüìä –°–í–û–î–ö–ê –ü–û –°–ï–í–ï–†–û-–ó–ê–ü–ê–î–ù–û–ú–£ –û–ö–†–£–ì–£:")
        print(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(self.results)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        prices = [o['price'] for o in self.results if o.get('price')]
        if prices:
            print(f"üí∞ –¶–µ–Ω—ã: {min(prices):,} - {max(prices):,} ‚ÇΩ")
            print(f"üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {sum(prices) / len(prices):,.0f} ‚ÇΩ")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        rooms_stats = {}
        for offer in self.results:
            rooms = offer.get('rooms', 0)
            rooms_stats[rooms] = rooms_stats.get(rooms, 0) + 1

        print("üè† –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º:")
        for rooms in sorted(rooms_stats.keys()):
            count = rooms_stats[rooms]
            name = "–°—Ç—É–¥–∏—è" if rooms == 0 else f"{rooms}-–∫"
            print(f"   {name}: {count} –æ–±—ä—è–≤.")

        # –¢–æ–ø —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
        metro_stats = {}
        for offer in self.results:
            metro = offer.get('metro')
            if metro:
                metro_stats[metro] = metro_stats.get(metro, 0) + 1

        if metro_stats:
            print("üöá –¢–æ–ø —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ:")
            for metro, count in sorted(metro_stats.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"   {metro}: {count}")


def main():
    print("=" * 60)
    print("üè† –ü–ê–†–°–ï–† –¶–ò–ê–ù - –ê–†–ï–ù–î–ê –ö–í–ê–†–¢–ò–†")
    print("üìç –°–ï–í–ï–†–û-–ó–ê–ü–ê–î–ù–´–ô –û–ö–†–£–ì –ú–û–°–ö–í–´")
    print("=" * 60)

    parser = CianNorthWestRentParser()

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    parser.collect_all_offers()

    if parser.results:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        parser.show_summary()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        filename = parser.save_to_json()

        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª: {filename}")
        print(f"üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(parser.results)}")

    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    main()